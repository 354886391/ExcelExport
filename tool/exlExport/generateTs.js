"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var _listFiledName;
var _listDesc;
var _listType;
var generateTs;
(function (generateTs) {
    function generateCode(data, listFieldName, listDesc, listType) {
        _listFiledName = listFieldName;
        _listDesc = listDesc;
        _listType = listType;
        return "/** auto generated by tools/exlExport/main.js, do not modify! */\nconst DIC_ALL: { [fieldName: string]: { [fieldValue: string]: " + data.code.className + "[] } } = {}\nconst LIST_ALL: " + data.code.className + "[] = []\n/**\n * ***file:*** " + path.basename(data.excel.inputFile) + "\n *\n * ***sheet:*** " + data.excel.sheetName + "\n * */\nexport class " + data.code.className + " {\n    " + generateGetters() + "\n    " + generateConstructor() + "\n    " + generateAppend(data) + "\n    " + generateClearAll()+"\n}\n/**\n * ***file:*** " + path.basename(data.excel.inputFile) + "\n *\n * ***sheet:*** " + data.excel.sheetName + "\n * */\nexport namespace " + data.code.className + "Provider {\n    " + generateGetById(data) + "\n    " + generateGetOne(data) + "\n    " + generateGetFew(data) + "\n    " + generateGetAll(data) + "\n    " + generateNameSpaceGetters(data) + "\n}\n";
    }
    generateTs.generateCode = generateCode;
    function generateGetters() {
        var codes = [];
        _listFiledName.forEach(function (fieldName, index) {
            codes.push("/** " + _listDesc[index] + " */\n    get " + fieldName + "(): " + _listType[index] + " {\n        return this._" + fieldName + "\n    }");
        });
        return codes.join('\n    ');
    }
    function generateConstructor() {
        var code = 'constructor(';
        _listFiledName.forEach(function (filedName, index) {
            if (index > 0) {
                code += ', ';
            }
            code += 'private _' + filedName + ': ' + _listType[index];
        });
        code += ') { }';
        return code;
    }
    function generateAppend(data) {
        var dataType = '{ ';
        _listFiledName.forEach(function (fieldName, index) {
            if (index > 0) {
                dataType += ', ';
            }
            dataType += fieldName + ': ' + _listType[index];
        });
        dataType += ' }';
        return "static append(data: " + dataType + "): void {\n        if (" + data.code.className + "Provider.getById(data." + data.excel.idField + ")) { return }\n        let ins: " + data.code.className + " = new " + data.code.className + "(data." + _listFiledName.join(', data.') + ")\n        let dic: { [fieldValue: string]: " + data.code.className + "[] }\n        let list: " + data.code.className + "[]\n        let fieldValue: any\n        ['" + _listFiledName.join('\', \'') + "'].forEach((fieldName: string): void => {\n            dic = DIC_ALL[fieldName]\n            if (!!!dic) {\n                dic = {}\n                DIC_ALL[fieldName] = dic\n            }\n            fieldValue = data[fieldName]\n            list = dic[fieldValue]\n            if (!!!list) {\n                list = []\n                dic[fieldValue] = list\n            }\n            list.push(ins)\n        })\n        LIST_ALL.push(ins)\n    }";
    }
    function generateClearAll(){
        return "static clearAll(): void {\n        ['" + _listFiledName.join('\', \'') + "'].forEach((fieldName: string): void => {\n            DIC_ALL[fieldName] = {}\n        })\n        LIST_ALL.length = 0\n    }";
    }
    function generateGetById(data) {
        return "/**\n     * \u901A\u8FC7id\u83B7\u53D6\u4E00\u6761\u6570\u636E\n     * @param id \u5BF9\u5E94\u67D0\u6761\u6570\u636E\u7684id\n     */\n    export function getById(" + data.excel.idField + ": number | string): " + data.code.className + " | undefined {\n        return getOne('" + data.excel.idField + "', " + data.excel.idField + ")\n    }";
    }
    function generateGetOne(data) {
        return "/**\n     * \u83B7\u53D6\u7B26\u5408\u5B57\u6BB5\u540D\u4E3A[fieldName](\u53C2\u6570fieldName\u63D0\u4F9B\u7684\u503C),\u503C\u4E3A[fieldValue](\u53C2\u6570fieldValue\u63D0\u4F9B\u7684\u503C)\u7684\u7B2C\u4E00\u6761\u6570\u636E\n     * @param fieldName \u5B57\u6BB5\u540D\n     * @param fieldValue \u8981\u67E5\u627E\u7684\u503C\n     */\n    export function getOne(fieldName: '" + _listFiledName.join('\' | \'') + "', fieldValue: any): " + data.code.className + " | undefined {\n        if (DIC_ALL[fieldName] && DIC_ALL[fieldName][fieldValue]) {\n            return DIC_ALL[fieldName][fieldValue][0]\n        }\n        return undefined\n    }";
    }
    function generateGetFew(data) {
        return "/**\n     * \u83B7\u53D6\u7B26\u5408\u5B57\u6BB5\u540D\u4E3A[fieldName](\u53C2\u6570fieldName\u63D0\u4F9B\u7684\u503C),\u503C\u4E3A[fieldValue](\u53C2\u6570fieldValue\u63D0\u4F9B\u7684\u503C)\u7684\u591A\u6761\u6570\u636E\n     * @param fieldName \u5B57\u6BB5\u540D\n     * @param fieldValue \u8981\u67E5\u627E\u7684\u503C\n     * @param limite \u957F\u5EA6\u9650\u5236,\u4E0D\u4F20\u53C2\u6570\u5219\u4EE3\u8868\u53D6\u6240\u6709\u7B26\u5408\u7684\u6570\u636E\n     */\n    export function getFew(fieldName: '" + _listFiledName.join('\' | \'') + "', fieldValue: any, limite?: number): " + data.code.className + "[] | undefined {\n        if (DIC_ALL[fieldName] && DIC_ALL[fieldName][fieldValue]) {\n            return DIC_ALL[fieldName][fieldValue].slice(0, limite)\n        }\n        return undefined\n    }";
    }
    function generateGetAll(data) {
        return "/** \u83B7\u53D6\u6240\u6709\u6570\u636E */\n    export function getAll(): " + data.code.className + "[] {\n        return LIST_ALL\n    }";
    }
    function generateNameSpaceGetters(data) {
        var codes = [];
        var code;
        _listFiledName.forEach(function (fieldName, index) {
            if (fieldName !== data.excel.idField) {
                code = "/**\n     * \u83B7\u53D6\u67D0\u4E2A[" + data.excel.idField + "](\u53C2\u6570" + data.excel.idField + "\u63D0\u4F9B\u7684\u503C)\u7684" + _listDesc[index] + "\n     * @param " + data.excel.idField + " " + data.excel.idField + "\u5B57\u6BB5\u7684\u503C\n     */\n    export function " + fieldName + "(" + data.excel.idField + ": number | string): " + _listType[index] + " {\n        return getById(" + data.excel.idField + ")." + fieldName + "\n    }";
                codes.push(code);
            }
        });
        return codes.join('\n    ');
    }
})(generateTs = exports.generateTs || (exports.generateTs = {}));
